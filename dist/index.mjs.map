{"version":3,"sources":["../index.ts","../regex.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { System } from \"./types\";\nimport { registry } from \"./regex\";\n\nconst baseSchema = z.string();\n\ntype MatcherArgs = {\n  system: keyof typeof registry;\n};\n\nfunction matcher(args?: MatcherArgs) {\n  if (!args) {\n    return baseSchema;\n  }\n\n  const { system } = args;\n  const provided = registry[system];\n\n  if (!provided) {\n    throw new Error(`Unsupported system type: ${String(system)}`);\n  }\n\n  return baseSchema.regex(provided.schema, { message: provided.message });\n}\n\nexport const zfn = {\n  filename: matcher,\n};\n","import { RefineConfig, System } from \"./types\";\n\n// Common Regex Parts\nconst windowsReserved = /^(?:CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(?:\\..*)?$/i;\nconst windowsChars = /[<>:\"/\\\\|?*\\x00-\\x1F]/;\nconst trailingChars = /[. ]$/;\nconst linuxChars = /[\\0/]/;\nconst macChars = /[:/]/;\nconst isoChars = /^[A-Z0-9_.-]+$/i; // Simplified ISO 9660 (Level 1/Joliet)\n\nexport const registry: Partial<Record<System, RefineConfig>> = {\n  // --- Universal / Common ---\n  universal: {\n    schema: new RegExp(\n      `^(?!${windowsReserved.source})[^${windowsChars.source.slice(\n        1,\n        -1\n      )}${linuxChars.source.slice(1, -1)}]+$`\n    ),\n    message:\n      \"Invalid universal filename: contains illegal characters or is a reserved name.\",\n  },\n\n  // --- macOS ---\n  macos: {\n    schema: new RegExp(`^[^${macChars.source.slice(1, -1)}]+$`),\n    message: \"Invalid macOS filename: cannot contain '/' or ':' characters.\",\n  },\n\n  // --- Linux ---\n  linux: {\n    // Added generic Linux entry\n    schema: new RegExp(`^[^${linuxChars.source.slice(1, -1)}]+$`),\n    message: \"Invalid Linux filename: cannot contain null or '/' characters.\",\n  },\n\n  // --- Windows ---\n  windows: {\n    schema: new RegExp(\n      `^(?!${windowsReserved.source})([^${windowsChars.source.slice(\n        1,\n        -1\n      )}]*[^${windowsChars.source.slice(1, -1)}${trailingChars.source.slice(\n        1,\n        -1\n      )}])$`\n    ),\n    message:\n      \"Invalid Windows filename: contains illegal characters (< > : \\\" / \\\\ | ? *), is a reserved name, or ends with '.' or ' '.\",\n  },\n};\n\n// Helper function to validate the complex Windows/FAT regex logic\nfunction isValidWindowsLike(filename: string): boolean {\n  if (windowsReserved.test(filename)) return false;\n  if (windowsChars.test(filename)) return false;\n  if (trailingChars.test(filename)) return false;\n  return filename.length > 0; // Ensure non-empty\n}\n\n// Refine Windows/FAT schemas using the helper function for clarity and robustness\n[\"windows\", \"ntfs\", \"fat32\", \"exfat\", \"refs\", \"fat16\", \"fat12\"].forEach(\n  (sys) => {\n    const key = sys as System;\n    if (registry[key]) {\n      registry[key]!.schema = {\n        test: isValidWindowsLike,\n      } as RegExp; // Trick TypeScript, Zod refine expects RegExp | function\n    }\n  }\n);\n"],"mappings":";AAAA,SAAS,SAAS;;;ACGlB,IAAM,kBAAkB;AACxB,IAAM,eAAe;AACrB,IAAM,gBAAgB;AACtB,IAAM,aAAa;AACnB,IAAM,WAAW;AAGV,IAAM,WAAkD;AAAA;AAAA,EAE7D,WAAW;AAAA,IACT,QAAQ,IAAI;AAAA,MACV,OAAO,gBAAgB,MAAM,MAAM,aAAa,OAAO;AAAA,QACrD;AAAA,QACA;AAAA,MACF,CAAC,GAAG,WAAW,OAAO,MAAM,GAAG,EAAE,CAAC;AAAA,IACpC;AAAA,IACA,SACE;AAAA,EACJ;AAAA;AAAA,EAGA,OAAO;AAAA,IACL,QAAQ,IAAI,OAAO,MAAM,SAAS,OAAO,MAAM,GAAG,EAAE,CAAC,KAAK;AAAA,IAC1D,SAAS;AAAA,EACX;AAAA;AAAA,EAGA,OAAO;AAAA;AAAA,IAEL,QAAQ,IAAI,OAAO,MAAM,WAAW,OAAO,MAAM,GAAG,EAAE,CAAC,KAAK;AAAA,IAC5D,SAAS;AAAA,EACX;AAAA;AAAA,EAGA,SAAS;AAAA,IACP,QAAQ,IAAI;AAAA,MACV,OAAO,gBAAgB,MAAM,OAAO,aAAa,OAAO;AAAA,QACtD;AAAA,QACA;AAAA,MACF,CAAC,OAAO,aAAa,OAAO,MAAM,GAAG,EAAE,CAAC,GAAG,cAAc,OAAO;AAAA,QAC9D;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,SACE;AAAA,EACJ;AACF;AAGA,SAAS,mBAAmB,UAA2B;AACrD,MAAI,gBAAgB,KAAK,QAAQ,EAAG,QAAO;AAC3C,MAAI,aAAa,KAAK,QAAQ,EAAG,QAAO;AACxC,MAAI,cAAc,KAAK,QAAQ,EAAG,QAAO;AACzC,SAAO,SAAS,SAAS;AAC3B;AAGA,CAAC,WAAW,QAAQ,SAAS,SAAS,QAAQ,SAAS,OAAO,EAAE;AAAA,EAC9D,CAAC,QAAQ;AACP,UAAM,MAAM;AACZ,QAAI,SAAS,GAAG,GAAG;AACjB,eAAS,GAAG,EAAG,SAAS;AAAA,QACtB,MAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACF;;;ADlEA,IAAM,aAAa,EAAE,OAAO;AAM5B,SAAS,QAAQ,MAAoB;AACnC,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,EACT;AAEA,QAAM,EAAE,OAAO,IAAI;AACnB,QAAM,WAAW,SAAS,MAAM;AAEhC,MAAI,CAAC,UAAU;AACb,UAAM,IAAI,MAAM,4BAA4B,OAAO,MAAM,CAAC,EAAE;AAAA,EAC9D;AAEA,SAAO,WAAW,MAAM,SAAS,QAAQ,EAAE,SAAS,SAAS,QAAQ,CAAC;AACxE;AAEO,IAAM,MAAM;AAAA,EACjB,UAAU;AACZ;","names":[]}